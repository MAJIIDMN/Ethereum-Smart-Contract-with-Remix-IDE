// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SecureMilestonePayment {
    address public buyer;
    address payable public seller;

    uint256 public deadline;      
    uint256 public basePrice;    
    bool public isVerified;
    bool public isRequesterApproved;
    bool public paid;

    constructor(
        address _buyer,
        address payable _seller,
        uint256 _priceInWei,
        uint256 _durationInMinutes
    ) {
        buyer = _buyer;
        seller = _seller;
        basePrice = _priceInWei;
        deadline = block.timestamp + (_durationInMinutes * 1 minutes);
        paid = false;
    }

    modifier onlyBuyer() {
        require(msg.sender == buyer, "Only buyer can act");
        _;
    }

    function setVerified(bool _status) external onlyBuyer {
        isVerified = _status;
    }

    function approveDelivery(bool _status) external onlyBuyer {
        isRequesterApproved = _status;
    }

    function getPaymentAmount() public view returns (uint256) {
        if (block.timestamp > deadline) {
            return basePrice + (basePrice * 10 / 100); // 10% penalty
        } else {
            return basePrice;
        }
    }

    function releasePaymentToSeller() external onlyBuyer {
        require(!paid, "Already paid");
        require(isVerified && isRequesterApproved, "Conditions not met");

        uint256 amountToPay = getPaymentAmount();
        require(address(this).balance >= amountToPay, "Insufficient contract balance");

        paid = true;
        seller.transfer(amountToPay);
    }

    function getDeadlineStatus() external view returns (bool onTime, uint256 remainingTime) {
        onTime = block.timestamp <= deadline;
        remainingTime = block.timestamp >= deadline ? 0 : deadline - block.timestamp;
    }
    
    receive() external payable {}

    fallback() external payable {}
}
